#!/usr/bin/env python3
"""
Generate rotating status line updates for Claude Code status bar
Shows key alerts, P&L, risk metrics, and agent status

---
description: Generate rotating status line with key fund metrics and alerts
---
"""

import sys
import json
import time
import re
from datetime import datetime
from pathlib import Path

class StatusLineGenerator:
    def __init__(self):
        self.claude_dir = Path(".claude")
        self.rotation_index = 0
        
    def read_portfolio_state(self):
        """Extract key portfolio metrics"""
        try:
            with open(self.claude_dir / "context" / "portfolio_state.md", 'r') as f:
                content = f.read()
                
            nav_match = re.search(r'Total NAV.*?\$([0-9.]+M)', content)
            pnl_match = re.search(r'Day P&L.*?\+?\$([0-9.]+K)', content)
            exposure_match = re.search(r'Net Exposure.*?(\d+)%', content)
            
            return {
                'nav': nav_match.group(1) if nav_match else 'N/A',
                'pnl': pnl_match.group(1) if pnl_match else '0K',
                'exposure': exposure_match.group(1) if exposure_match else 'N/A'
            }
        except FileNotFoundError:
            return {'nav': 'N/A', 'pnl': 'N/A', 'exposure': 'N/A'}
    
    def count_alerts(self):
        """Count active alerts by severity"""
        try:
            with open(self.claude_dir / "alerts" / "active.md", 'r') as f:
                content = f.read()
            
            critical = content.count('üö®')
            warnings = content.count('‚ö†Ô∏è')
            return critical, warnings
        except FileNotFoundError:
            return 0, 0
    
    def get_market_session(self):
        """Get current market session"""
        try:
            with open(self.claude_dir / "context" / "market_session", 'r') as f:
                return f.read().strip()
        except FileNotFoundError:
            return "unknown"
    
    def get_agent_activity(self):
        """Check which agents have recent activity"""
        active_agents = []
        agents = ["risk", "technicals", "fundamentals", "quant", "sentiment", "portfolio"]
        
        for agent in agents:
            report_file = self.claude_dir / "reports" / agent / "latest.md"
            if report_file.exists():
                # Check if report is recent (last 4 hours)
                mtime = report_file.stat().st_mtime
                if (time.time() - mtime) < 14400:  # 4 hours
                    active_agents.append(agent[:4])  # Abbreviate
        
        return active_agents
    
    def generate_status_lines(self):
        """Generate array of rotating status line messages"""
        portfolio = self.read_portfolio_state()
        critical_alerts, warnings = self.count_alerts()
        session = self.get_market_session()
        active_agents = self.get_agent_activity()
        
        status_lines = []
        
        # Line 1: Basic portfolio info
        status_lines.append(
            f"64bit Capital | NAV: ${portfolio['nav']} | P&L: +${portfolio['pnl']} | {session.title()}"
        )
        
        # Line 2: Risk and exposure
        status_lines.append(
            f"Net Exp: {portfolio['exposure']}% | Alerts: {critical_alerts}üö® {warnings}‚ö†Ô∏è  | Active: {len(active_agents)} agents"
        )
        
        # Line 3: Agent activity (if any)
        if active_agents:
            agents_str = " ".join(active_agents)
            status_lines.append(f"Recent Activity: {agents_str} | Use /alerts for details")
        
        # Line 4: Time-based contextual info
        hour = datetime.now().hour
        if 5 <= hour < 9:  # Pre-market
            status_lines.append("Pre-Market | Use /morning to start brief | Ready for market open")
        elif 9 <= hour < 16:  # Market hours
            status_lines.append("Market Open | Monitor alerts | Use /portfolio for decisions") 
        elif 16 <= hour < 18:  # Post-market
            status_lines.append("Post-Market | Use /eod for review | Prep for tomorrow")
        else:  # After hours
            status_lines.append("After Hours | Markets closed | Planning next session")
            
        return status_lines
    
    def rotate_status(self, interval=5):
        """Display rotating status line"""
        status_lines = self.generate_status_lines()
        
        if not status_lines:
            print("64bit Capital | Status Unknown | Use /morning to initialize")
            return
            
        # If called with 'next' argument, rotate to next status
        if len(sys.argv) > 1 and sys.argv[1] == 'next':
            self.rotation_index = (self.rotation_index + 1) % len(status_lines)
        
        # Store rotation state
        state_file = self.claude_dir / "temp" / "statusline_state.json"
        state_file.parent.mkdir(exist_ok=True)
        
        try:
            with open(state_file, 'r') as f:
                state = json.load(f)
                self.rotation_index = state.get('index', 0)
        except (FileNotFoundError, json.JSONDecodeError):
            self.rotation_index = 0
        
        # Show current status line
        current_line = status_lines[self.rotation_index % len(status_lines)]
        print(current_line)
        
        # Update state for next rotation
        next_index = (self.rotation_index + 1) % len(status_lines)
        with open(state_file, 'w') as f:
            json.dump({'index': next_index, 'timestamp': time.time()}, f)

def main():
    generator = StatusLineGenerator()
    
    if len(sys.argv) > 1 and sys.argv[1] == 'all':
        # Show all status lines
        for i, line in enumerate(generator.generate_status_lines(), 1):
            print(f"{i}: {line}")
    else:
        # Show rotating status line
        generator.rotate_status()

if __name__ == "__main__":
    main()