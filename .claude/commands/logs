#!/usr/bin/env python3
"""
Manage trading system logs - view, search, archive, and cleanup

---
description: Manage trading system logs and archives
---
"""

import sys
import subprocess
from pathlib import Path

def main():
    log_manager_path = Path(".claude/scheduler/log_manager.py")
    
    if not log_manager_path.exists():
        print("‚ùå Log manager not found. Repository may be incomplete.")
        return
    
    # Handle different subcommands
    if len(sys.argv) < 2:
        print("üìã Log Management Commands:")
        print()
        print("  /logs status           # Show current log status and sizes")
        print("  /logs view [name]      # View recent logs (tail -f)")
        print("  /logs search <pattern> # Search logs for pattern")
        print("  /logs cleanup          # Run log rotation and cleanup")
        print("  /logs export [days]    # Export logs for analysis")
        print("  /logs archive          # Archive old logs manually")
        print()
        print("Examples:")
        print("  /logs view pre_market  # Tail pre-market logs")
        print("  /logs search error     # Find recent errors")
        print("  /logs export 7         # Export last 7 days")
        return
    
    command = sys.argv[1].lower()
    
    # Handle 'view' command specially for tail -f
    if command == "view":
        logs_dir = Path(".claude/logs")
        
        if len(sys.argv) < 3:
            # Show available logs
            if logs_dir.exists():
                log_files = list(logs_dir.glob("*.log"))
                if log_files:
                    print("üìÑ Available logs:")
                    for log_file in sorted(log_files):
                        size_kb = log_file.stat().st_size / 1024
                        print(f"  {log_file.stem}: {size_kb:.1f} KB")
                    print()
                    print("Usage: /logs view <log_name>")
                else:
                    print("No log files found. Run /morning to generate logs.")
            else:
                print("Logs directory not found.")
            return
        
        log_name = sys.argv[2]
        log_file = logs_dir / f"{log_name}.log"
        
        if log_file.exists():
            print(f"üìä Viewing {log_name} log (Ctrl+C to exit)")
            print("=" * 40)
            try:
                subprocess.run(["tail", "-f", str(log_file)])
            except KeyboardInterrupt:
                print("\n‚úÖ Log viewing stopped")
            except FileNotFoundError:
                # Fallback for systems without tail
                with open(log_file, 'r') as f:
                    print(f.read())
        else:
            print(f"‚ùå Log file not found: {log_name}.log")
            available = list(logs_dir.glob("*.log")) if logs_dir.exists() else []
            if available:
                print("Available logs:", [f.stem for f in available])
        return
    
    # Handle archive command
    if command == "archive":
        try:
            subprocess.run([sys.executable, str(log_manager_path), "rotate"], check=True)
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Archive error: {e}")
        return
    
    # Pass other commands to log manager
    args = sys.argv[1:]  # Pass all arguments after /logs
    
    try:
        subprocess.run([sys.executable, str(log_manager_path)] + args, check=True)
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Log manager error: {e}")
    except FileNotFoundError:
        print("‚ùå Python not found in PATH")

if __name__ == "__main__":
    main()