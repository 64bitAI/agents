#!/usr/bin/env python3
"""
Cross-platform scheduler for hedge fund trading workflows
Handles cron (Unix/Mac), Task Scheduler (Windows), and manual scheduling
"""

import os
import sys
import platform
import json
import subprocess
from datetime import datetime, time
from pathlib import Path

class CrossPlatformScheduler:
    def __init__(self):
        self.system = platform.system()
        self.claude_dir = Path(".claude")
        self.scheduler_dir = self.claude_dir / "scheduler"
        self.scheduler_dir.mkdir(exist_ok=True)
        
        # Trading schedule (ET timezone)
        self.schedules = {
            "pre_market": "05:30",      # Pre-market analysis
            "market_open": "09:30",     # Market open preparation  
            "midday_check": "12:00",    # Midday risk/P&L check
            "market_close": "16:00",    # Market close actions
            "post_market": "16:30",     # EOD review
            "overnight": "18:00"        # Overnight prep
        }
        
        # Commands for each schedule
        self.commands = {
            "pre_market": "claude code --directory '{}' --message '/morning'",
            "market_open": "claude code --directory '{}' --message '/statusline && /alerts'",
            "midday_check": "claude code --directory '{}' --message '/risk \"midday check\" && /portfolio \"midday update\"'",
            "market_close": "claude code --directory '{}' --message '/trader \"close positions as needed\" && /risk \"market close update\"'",
            "post_market": "claude code --directory '{}' --message '/eod'",
            "overnight": "claude code --directory '{}' --message '/portfolio \"overnight review\" && echo \"post-market\" > .claude/context/market_session'"
        }
    
    def get_current_directory(self):
        """Get absolute path to current directory"""
        return os.path.abspath('.')
    
    def is_market_day(self):
        """Simple market day check (weekdays, no holiday calendar yet)"""
        return datetime.now().weekday() < 5  # Monday=0, Friday=4
    
    def create_script_wrapper(self, job_name, command):
        """Create a wrapper script for the scheduled command"""
        script_dir = self.scheduler_dir / "scripts"
        script_dir.mkdir(exist_ok=True)
        
        if self.system == "Windows":
            script_file = script_dir / f"{job_name}.bat"
            script_content = f"""@echo off
cd /d "{self.get_current_directory()}"
if %date:~-10,-8% GEQ 1 if %date:~-10,-8% LEQ 5 (
    {command.format(self.get_current_directory())}
) else (
    echo Skipping {job_name} - not a market day
)
"""
        else:
            script_file = script_dir / f"{job_name}.sh"
            script_content = f"""#!/bin/bash
cd "{self.get_current_directory()}"

# Check if it's a market day (Monday-Friday)
if [ $(date +%u) -le 5 ]; then
    {command.format(self.get_current_directory())}
else
    echo "Skipping {job_name} - not a market day"
fi
"""
        
        with open(script_file, 'w') as f:
            f.write(script_content)
        
        if self.system != "Windows":
            os.chmod(script_file, 0o755)
        
        return script_file
    
    def install_unix_cron(self):
        """Install cron jobs for Unix/Linux/macOS"""
        cron_entries = []
        current_dir = self.get_current_directory()
        
        for job_name, schedule_time in self.schedules.items():
            hour, minute = schedule_time.split(':')
            script_path = self.create_script_wrapper(job_name, self.commands[job_name])
            
            # Cron format: minute hour * * day_of_week command
            cron_line = f"{minute} {hour} * * 1-5 {script_path} >> {current_dir}/.claude/logs/{job_name}.log 2>&1"
            cron_entries.append(cron_line)
        
        # Create logs directory
        logs_dir = self.claude_dir / "logs"
        logs_dir.mkdir(exist_ok=True)
        
        # Add to crontab
        cron_file = self.scheduler_dir / "hedge_fund_cron.txt"
        with open(cron_file, 'w') as f:
            f.write("# Hedge Fund Trading Schedule - Generated by Claude Code\n")
            f.write("# Edit times in .claude/scheduler/scheduler.py and run /schedule install\n\n")
            for entry in cron_entries:
                f.write(entry + "\n")
        
        print(f"Generated cron entries in {cron_file}")
        print("\nTo install, run:")
        print(f"  crontab {cron_file}")
        print("\nTo view current crontab:")
        print("  crontab -l")
        print("\nTo remove:")
        print("  crontab -r")
        
        return cron_file
    
    def install_windows_tasks(self):
        """Install Windows Task Scheduler jobs"""
        current_dir = self.get_current_directory()
        
        for job_name, schedule_time in self.schedules.items():
            script_path = self.create_script_wrapper(job_name, self.commands[job_name])
            
            task_name = f"HedgeFund_{job_name}"
            
            # Create scheduled task XML
            xml_content = f"""<?xml version="1.0" encoding="UTF-16"?>
<Task version="1.2" xmlns="http://schemas.microsoft.com/windows/2004/02/mit/task">
  <Triggers>
    <CalendarTrigger>
      <StartBoundary>2024-01-01T{schedule_time}:00</StartBoundary>
      <Enabled>true</Enabled>
      <ScheduleByWeek>
        <DaysOfWeek>
          <Monday />
          <Tuesday />
          <Wednesday />
          <Thursday />
          <Friday />
        </DaysOfWeek>
        <WeeksInterval>1</WeeksInterval>
      </ScheduleByWeek>
    </CalendarTrigger>
  </Triggers>
  <Actions>
    <Exec>
      <Command>{script_path}</Command>
      <WorkingDirectory>{current_dir}</WorkingDirectory>
    </Exec>
  </Actions>
  <Settings>
    <MultipleInstancesPolicy>IgnoreNew</MultipleInstancesPolicy>
    <DisallowStartIfOnBatteries>false</DisallowStartIfOnBatteries>
    <StopIfGoingOnBatteries>false</StopIfGoingOnBatteries>
    <AllowHardTerminate>true</AllowHardTerminate>
    <StartWhenAvailable>true</StartWhenAvailable>
    <RunOnlyIfNetworkAvailable>false</RunOnlyIfNetworkAvailable>
    <AllowStartOnDemand>true</AllowStartOnDemand>
    <Enabled>true</Enabled>
    <Hidden>false</Hidden>
    <RunOnlyIfIdle>false</RunOnlyIfIdle>
    <WakeToRun>false</WakeToRun>
    <ExecutionTimeLimit>PT1H</ExecutionTimeLimit>
    <Priority>7</Priority>
  </Settings>
</Task>"""
            
            xml_file = self.scheduler_dir / f"{task_name}.xml"
            with open(xml_file, 'w') as f:
                f.write(xml_content)
            
            print(f"Created task definition: {xml_file}")
            print(f"To install: schtasks /create /xml \"{xml_file}\" /tn \"{task_name}\"")
        
        # Create batch installer
        installer_file = self.scheduler_dir / "install_tasks.bat"
        with open(installer_file, 'w') as f:
            f.write("@echo off\n")
            f.write("echo Installing Hedge Fund trading schedule...\n\n")
            
            for job_name in self.schedules.keys():
                task_name = f"HedgeFund_{job_name}"
                xml_file = self.scheduler_dir / f"{task_name}.xml"
                f.write(f'schtasks /create /xml "{xml_file}" /tn "{task_name}"\n')
            
            f.write('\necho.\necho Installation complete!\n')
            f.write('echo Use "schtasks /query /fo table" to view scheduled tasks\n')
            f.write('pause\n')
        
        print(f"\nRun {installer_file} as Administrator to install all tasks")
        
        return installer_file
    
    def create_manual_runner(self):
        """Create manual schedule runner for testing or systems without cron/task scheduler"""
        runner_file = self.scheduler_dir / "manual_runner.py"
        
        runner_content = '''#!/usr/bin/env python3
"""
Manual schedule runner - runs trading schedule on demand
Usage: python manual_runner.py [schedule_name]
"""

import sys
import os
import subprocess
from datetime import datetime

# Add parent directory to path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from scheduler import CrossPlatformScheduler

def run_schedule(schedule_name=None):
    scheduler = CrossPlatformScheduler()
    
    if not scheduler.is_market_day():
        print("‚è∞ Not a market day - skipping scheduled tasks")
        return
    
    if schedule_name:
        if schedule_name in scheduler.commands:
            command = scheduler.commands[schedule_name].format(scheduler.get_current_directory())
            print(f"üöÄ Running {schedule_name}: {command}")
            subprocess.run(command, shell=True)
        else:
            print(f"‚ùå Unknown schedule: {schedule_name}")
            print(f"Available schedules: {list(scheduler.commands.keys())}")
    else:
        print("üìÖ Available schedules:")
        for name, time in scheduler.schedules.items():
            print(f"  {name}: {time} ET")

if __name__ == "__main__":
    if len(sys.argv) > 1:
        run_schedule(sys.argv[1])
    else:
        run_schedule()
'''
        
        with open(runner_file, 'w') as f:
            f.write(runner_content)
        
        os.chmod(runner_file, 0o755)
        print(f"Created manual runner: {runner_file}")
        print("Usage:")
        print(f"  python {runner_file}                    # List schedules")
        print(f"  python {runner_file} pre_market         # Run pre-market")
        print(f"  python {runner_file} post_market        # Run EOD review")
        
        return runner_file
    
    def install_scheduler(self):
        """Install appropriate scheduler for current platform"""
        print(f"üîß Installing scheduler for {self.system}...")
        print(f"üìÅ Working directory: {self.get_current_directory()}")
        print()
        
        if self.system in ["Linux", "Darwin"]:  # Darwin = macOS
            return self.install_unix_cron()
        elif self.system == "Windows":
            return self.install_windows_tasks()
        else:
            print(f"‚ùå Unsupported platform: {self.system}")
            print("Using manual runner instead...")
            return self.create_manual_runner()
    
    def show_status(self):
        """Show current scheduler status"""
        print("üìä Hedge Fund Trading Schedule")
        print("=" * 40)
        print(f"Platform: {self.system}")
        print(f"Market Day: {'Yes' if self.is_market_day() else 'No'}")
        print()
        
        print("Scheduled Tasks:")
        for name, time in self.schedules.items():
            print(f"  {time} ET - {name}")
        print()
        
        if self.system in ["Linux", "Darwin"]:
            print("Cron Status:")
            try:
                result = subprocess.run(["crontab", "-l"], capture_output=True, text=True)
                if "hedge_fund" in result.stdout.lower():
                    print("  ‚úÖ Cron jobs installed")
                else:
                    print("  ‚ùå No cron jobs found")
                    print("  Run: /schedule install")
            except subprocess.CalledProcessError:
                print("  ‚ùå No crontab entries")
        
        elif self.system == "Windows":
            print("Task Scheduler Status:")
            try:
                result = subprocess.run(
                    ["schtasks", "/query", "/fo", "table"], 
                    capture_output=True, text=True
                )
                hedge_tasks = [line for line in result.stdout.split('\n') if 'HedgeFund_' in line]
                if hedge_tasks:
                    print(f"  ‚úÖ {len(hedge_tasks)} tasks installed")
                else:
                    print("  ‚ùå No scheduled tasks found")
                    print("  Run: /schedule install")
            except subprocess.CalledProcessError:
                print("  ‚ùå Cannot check task scheduler")
        
        # Check for manual runner
        manual_runner = self.scheduler_dir / "manual_runner.py"
        if manual_runner.exists():
            print(f"Manual Runner: ‚úÖ Available at {manual_runner}")
    
    def uninstall_scheduler(self):
        """Remove scheduled jobs"""
        if self.system in ["Linux", "Darwin"]:
            print("To remove cron jobs, run: crontab -r")
            print("Or edit with: crontab -e")
        
        elif self.system == "Windows":
            print("Removing Windows scheduled tasks...")
            for job_name in self.schedules.keys():
                task_name = f"HedgeFund_{job_name}"
                try:
                    subprocess.run(
                        ["schtasks", "/delete", "/tn", task_name, "/f"],
                        capture_output=True
                    )
                    print(f"  Removed: {task_name}")
                except subprocess.CalledProcessError:
                    print(f"  Not found: {task_name}")

def main():
    scheduler = CrossPlatformScheduler()
    
    if len(sys.argv) < 2:
        scheduler.show_status()
        return
    
    command = sys.argv[1].lower()
    
    if command == "install":
        scheduler.install_scheduler()
        scheduler.create_manual_runner()
    elif command == "status":
        scheduler.show_status()
    elif command == "uninstall":
        scheduler.uninstall_scheduler()
    elif command == "manual":
        scheduler.create_manual_runner()
    else:
        print("Usage: python scheduler.py [install|status|uninstall|manual]")

if __name__ == "__main__":
    main()